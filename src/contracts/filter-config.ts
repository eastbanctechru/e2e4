/**
 * Контракт, представляющий собой настройки, которые могут быть переданы в {@link FiltersService} для более тонкой настройки поведения
 * См. также {@link filter}
 */
export interface FilterConfig {
    /**
     * Значение по умолчанию, на которое будет сброшено указанное поле при вызове метода {@link FiltersService.resetValues}
     * Если данное значение не указано, то {@link FiltersService} устанавливает в качестве значения по умолчанию значение, которое было у целевого поля на момент первой попытки работы с {@link FiltersService}. 
     * Например, при первом вызове метода {@link FiltersService.applyParams} или {@link FiltersService.getRequestState}   
     */
    defaultValue?: Object;
    /**
     * Имя свойства в целевом классе, с помощью которого будет осуществляться четние и запись значений поля.
     * При использовании для настройки декоратора {@link filter} данный параметр заполняется автоматически
     */
    propertyName?: string;
    /**
     * Имя или функция, возвращающая имя, с которым значение целевого поля будет записано в конечный запрос для отправки на сервер или сохранения.
     * Если данное значение не указано, при использовании декоратора {@link filter}, то название параметра будет эквивалентно имени целевого поля. 
     */
    parameterName?: string | (() => string);
    /**
     * Признак, указывающий, что при разборе переметров, например, методом {@link FiltersService.applyParams} данное поле следует проигнорировать и оно будет построено в конечном коде самостоятельно.
     * Как правило, используется в случае, если логика построения значения зависит от каких-либо внешних условий
     */
    ignoreOnAutoMap?: boolean;
    /**
     * Признак, указывающий, что любые falsie-значения (к примеру, пустая строка) целевого поля должны быть записаны в конечный запрос как null.
     */
    emptyIsNull?: boolean;
    /**
     * Признак, указывающий, что при построении/разборе состояния необходимо принудительно выяснять тип данных.
     * Например, строка 'null' будет преобразована в значение null, 'true' в булево значение true, '1.0' в число 1.0 и т.д.
     * Для принудительного построения типа данных используется метод {@link Utility.coerceValue}
     * При использовании декоратора {@link filter}, значение данного параметра по умолчанию равно true.
     */
    coerce?: boolean;
    /**
     * Признак, указывающий, необходимо ли сохранять данный признак между сессиями пользователя.
     * В рамках библиотеки e2e4 данный признак не используется, поскольку реализация способа сохранения зависит от конечных потребностей и должна быть реализована в конечном коде.
     */
    persisted?: boolean | (() => boolean);
    /**
     * Функция, при помощи которой будет выполняться сериализация значения целевого поля при построении объекта, представляющего собой состояние.
     */
    serializeFormatter?: (value: Object) => Object;
    /**
     * Функция, при помощи которой будет выполнен разбор значения целевого поля при разборе параметров.
     */
    parseFormatter?: (rawValue: Object, allValues?: Object) => Object;
}
